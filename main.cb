SAFEEXIT OFF 'This is your first CoolBasic program!

Const GAME_TITLE     = "Mets-palopeli"
Const VERSION_STRING = "v0.0.2-2 ALPHA" // "release.beta.alpha-hotfix CURRENT"
Const RELEASE_TYPE   = "TECHDEMO 2"

Global TITLE_STRING As String
TITLE_STRING = GAME_TITLE + " " + VERSION_STRING + " " + RELEASE_TYPE

// Map constants and routines
Include "map.cb"
Include "firespreading.cb"
// Resources and rendering
Include	"renderer.cb"

gBuffer = MakeImage(SW * 4,SH * 4)
// GUI resources and routines
Include "gui.cb"
// Main menu
Include "menu.cb"

// Main loop
mainMenu:
Repeat
	Gosub updateMenu
	// Render scaled pixels.
	Gosub scaleBuffer
	DrawToScreen
	DrawImage gBuffer, 0, 0
	// Credits won't be scaled.
	Gosub credits
	DrawScreen
Until KeyHit(cbKeyESC)
End

load:
	// Start by loading and populating the map with trees.
	GenerateMap("maps/testi.png", 0)
	Gosub drawLoading

	// Create a test copter.
	c.ENTITIES = New(ENTITIES)
	c\etype = ENTITY_COPTER
	c\tank = 5000
	c\z = 40

	// Initialize state.
	makingWP = 0
	part = 0
	lastUpdate = Timer()
	ClearMouse
	ClearKeys
Return

main:
	Gosub load
	Repeat
		SetWindow TITLE_STRING + " FPS: " + FPS()
		// Draw to a buffer instead of screen.
		DrawToImage gBuffer
		Cls
		
		// Update delta time.
		t# = (Timer() - lastUpdate) / 1000.0
		lastUpdate = Timer()
		
		
		Gosub updateFireSpreading

		Gosub updategui

		doublePx = Not KeyDown(cbkeyZ)
		If doublePx Then Gosub updatecopter
		
		// Camera movement.
		cx = cx + ( (LeftKey() Or KeyDown(cbkeya)) - (RightKey() Or KeyDown(cbkeyd)) ) * (1 + (Not doublePx) * 3) * 140 * t
		cy = cy - ( (DownKey() Or KeyDown(cbkeys)) - (UpKey()    Or KeyDown(cbkeyw)) ) * (1 + (Not doublePx) * 3) * 140 * t
	
		If Not doublePx Then // Draw zoomed out.
			// Center the camera
			cx = cx + SW * 1.5 : cy = cy + SH * 1.5
			For tx = 0 To MAP_WIDTH - 1
				For ty = 0 To MAP_HEIGHT - 1
					burning = Min(Max(0, heat(tx, ty) * (burnTimes(tx, ty) > 0) / 200.0), 1)
					id = mapTiles(tx, ty)
					Gosub drawTile
				Next ty
			Next tx
			// Reset camera position.
			cx = cx - SW * 1.5 : cy = cy - SH * 1.5
		Else
			// Limit rendering to visible screen area.
			xlimit = -cx / 16 - cy / 8
			ylimit =  cx / 16 - cy / 8
			For tx = Max(0, xlimit) To Min(xlimit + 30, MAP_WIDTH - 1)
				For ty = Max(0, ylimit - 10) To Min(ylimit + 21, MAP_HEIGHT - 1)
					burning = Min(Max(heat(tx, ty) * (burnTimes(tx, ty) > 0) / 100.0, 0), 1)
					id = mapTiles(tx, ty)
					Gosub drawTile
				Next ty
				ttx = tx
				For c.ENTITIES = Each ENTITIES
					If c\etype = ENTITY_COPTER And RoundUp(c\tx) = tx Then
						// Calculate copter moving direction.
						a = (GetAngle(c\tx - c\xv, c\ty - c\yv, c\tx, c\ty) - 45) Mod 360
						If a > 0   And a < 90  Then dir = 0
						If a > 90  And a < 180 Then dir = 1
						If a > 180 And a < 270 Then dir = 2
						If a > 270 And a < 360 Then dir = 3
						tx = c\tx
						ty = c\ty
						Gosub kamera
						DrawImage copter(dir, 0), sx - TW / 2, sy - 8 // ImageHeight(copter(dir, 0))
						DrawImage copter(dir, 1), sx - TW / 2, -c\z + sy - 17 // ImageHeight(copter(dir, 1))
					EndIf
				Next c
				tx = ttx
			Next tx
		EndIf

		Gosub updatewaypoints
		Gosub drawWaypoints
		
		If doublePx Then
			Gosub updateParticles
			Gosub drawgui
		EndIf

		// NAPALM
		If MouseDown(2) Then
			sxf = MouseX() / 4.0
			syf = MouseY() / 4.0
			Gosub inversekamerafloat
			If txf >= 0 And tyf >= 0 And txf < MAP_WIDTH And tyf < MAP_HEIGHT Then
				For i = 0 To 20
					makeparticle(PARTICLE_FIRE, txf + 1, tyf, 14 + Rand(4), 0, 0, 80.0, 0, 0, -180, 0, 1000 + Rand(-100, 100))
				Next i
			EndIf
		EndIf
		
		// Draw doublepixel buffer And SCREEN.
		DrawToScreen
		If doublePx Then Gosub scalebuffer
		DrawImage gbuffer, 0, 0
		DrawScreen
	Until KeyHit(cbKeyESC)
	Gosub unload
Return

unload:
	For e.ENTITIES = Each ENTITIES
		Delete e
	Next e
	For wp.WAYPOINTS = Each WAYPOINTS
		Delete wp
	Next wp
Return

updateCopter:
	For c.ENTITIES = Each ENTITIES
		If c\etype = ENTITY_COPTER Then
			// Move copter up and down
			c\z = c\z + Sin(Timer() / 10) * 0.4
			// Get waypoint
			wp.WAYPOINTS = ConvertToType(c\wayPoint)
			If wp <> NULL Then
				s# = COPTER_SPEED * t#
				
				// Go To waypoint Or the End of the waypoint Line.
				If Not c\start Then
					ang# = GetAngle(c\tx, c\ty, wp\tx, wp\ty) 
					d# = Distance(c\tx, c\ty, wp\tx, wp\ty)
				Else
					ang# = GetAngle(c\tx, c\ty, wp\lx, wp\ly) 
					d# = Distance(c\tx, c\ty, wp\lx, wp\ly)
				EndIf
				
				// If we reach the goal, toggle spraying And possibly change target waypoint.
				If d < s Then
					If c\start And wp\n Then c\wayPoint = wp\n
					c\start = Not c\start
				Else
					c\xv =  Cos(ang) * s
					c\yv = -Sin(ang) * s
					c\tx = c\tx + c\xv
					c\ty = c\ty + c\yv
				EndIf
			EndIf
			
			// If we're inside the map area And we need To spray, create foam.
			If c\tx >= 0 And c\ty >= 0 And c\tx < MAP_WIDTH - 1 And c\ty < MAP_HEIGHT - 1 And c\start Then
				For i = 0 To 10
					makeparticle(PARTICLE_FOAM, c\tx + 1, c\ty, c\z + 10 - Rand(4), c\xv, c\yv, -40.0, 0, 0, -40, 0, c\z / 30 * 550 + Rand(-20, 20))
				Next i
			EndIf
		EndIf
	Next c
Return

updateParticles:
	Lock()
	For p.ENTITIES = Each ENTITIES
		If p\etype = ENTITY_PARTICLE Then
			// Draw particle.
			txf# = p\tx
			tyf# = p\ty
			Gosub kamerafloat
			If sxf => 0 And syf => 0 And sxf < GUI_WINDOW_WIDTH And syf - p\z < GUI_WINDOW_HEIGHT Then PutPixel2 sxf, syf - p\z, pColors(p\t, p\f)
			// Update particle position.
			p\tx = p\tx + (p\xv + WIND_SPEED_X * 0.2) * t
			p\ty = p\ty + (p\yv + WIND_SPEED_Y * 0.2) * t
			p\z  = p\z  + p\zv * t
			p\xv = p\xv + p\xa * t
			p\yv = p\yv + p\ya * t
			p\zv = p\zv + p\za * t
			// Update animation.
			p\f = Min(pFrames - 1, Max(0, RoundDown(((Timer() - p\start) / Float(p\l)) * pFrames)))
			// Check life Time.
			If Timer() > p\start + p\l Or p\z =< 0 Then
				If  p\tx >= 0 And p\tx < MAP_WIDTH - 1 And p\ty >= 0 And p\ty < MAP_HEIGHT - 1 Then
					If p\t = PARTICLE_FIRE Then
						heat(Int(p\tx), Int(p\ty)) = heat(Int(p\tx), Int(p\ty)) + 15
					ElseIf p\t = PARTICLE_FOAM Then
						heat(Int(p\tx), Int(p\ty)) = heat(Int(p\tx), Int(p\ty)) - 15
					EndIf
				EndIf
				Delete p
			EndIf
		EndIf
	Next p
	Unlock
Return

scaleBuffer:
	// Scale 200x150 x 4 -> 800x600
	i = Image(gBuffer)
	For y = SH To 0 Step -1
		CopyBox 0, y, SH * 4, 1, 0, y * 4    , i, i
		CopyBox 0, y, SH * 4, 1, 0, y * 4 + 1, i, i
		CopyBox 0, y, SH * 4, 1, 0, y * 4 + 2, i, i
		CopyBox 0, y, SH * 4, 1, 0, y * 4 + 3, i, i
	Next y
	For x = SW To 0 Step -1
		CopyBox x, 0, 1, SW * 4, x * 4    , 0, i, i
		CopyBox x, 0, 1, SW * 4, x * 4 + 1, 0, i, i
		CopyBox x, 0, 1, SW * 4, x * 4 + 2, 0, i, i
		CopyBox x, 0, 1, SW * 4, x * 4 + 3, 0, i, i
	Next x
Return
