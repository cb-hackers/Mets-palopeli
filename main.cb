'This is your first CoolBasic program!
Include "map.cb"
Include	"renderer.cb"
Include "firespreading.cb"

gBuffer = MakeImage(SW*4,SH*4)
gui=LoadImage("gfx/gui.png")
minimap=MakeImage(50,50)
Include "menu.cb"

Repeat
    Gosub menu
	Gosub scaleBuffer
    DrawToScreen
	DrawImage gBuffer,0,0
    Gosub credits
	DrawScreen
Forever

copterx#=0
coptery#=0
'copterz#=52

main:
    // Start by loading and populating the map with trees.
    GenerateMap("maps/testi.png", 0)
    Color cbwhite
    DrawToScreen
    iterations# = 105
    cx=100
    cy=-325
    For i=0 To Int(iterations)
        GrowTrees()
        // Render loading animation
        If i Mod 10 = 1 Then
            cx = cx + SW*1.5 : cy = cy + SH*1.5
            For tx=0 To MAP_WIDTH-1
                For ty=0 To MAP_HEIGHT-1
                    id = mapTiles(tx,ty)
                    Gosub drawTile
                Next ty
            Next tx
            cx = cx - SW*1.5 : cy = cy - SH*1.5
            Color cbblack
            CenterText 401,315,"Growing trees..."
            Box 399-(i/iterations*800)/2,289,i/iterations*800+2,22,1
            Color cbwhite
            CenterText 400,314,"Growing trees..."
            Color 255-i/iterations*200,255,255
            Box 400-(i/iterations*800)/2,290,i/iterations*800,20,1
            DrawScreen
        EndIf
    Next i
    part = 0
    lastUpdate = Timer()
    ClearMouse
    ClearKeys
    
    // Create test copter
    c.ENTITIES = New(ENTITIES)
    c\tank = 5000
    
    Repeat
        'SetWindow "FPS:" + FPS()
        DrawToImage gbuffer
        Cls
        If KeyDown(28) Then
            GrowTrees()
        EndIf
        t# = (Timer() - lastUpdate) / 1000.0
        lastUpdate = Timer()
        UpdateFireSpreading(t#, part)
        part + 1

		doublePx = Not KeyDown(cbkeyZ)
		If doublePx Then Gosub updatecopter
		
        cx=cx+((LeftKey() Or KeyDown(cbkeya))-(RightKey() Or KeyDown(cbkeyd)))*4 * (1 + (Not doublePx) * 3) * 35 * t
        cy=cy-((DownKey() Or KeyDown(cbkeys))-(UpKey() Or KeyDown(cbkeyw)))*4 * (1 + (Not doublePx) * 3) * 35 * t
	
		If Not doublePx Then 
			cx = cx + SW*1.5 : cy = cy + SH*1.5
			For tx=0 To MAP_WIDTH-1
				For ty=0 To MAP_HEIGHT-1
					burning=Min(Max(0,heat(tx,ty)*(burnTimes(tx,ty)>0)/200.0),1)
					id=	mapTiles(tx,ty)
					Gosub drawTile
				Next ty
				If copterx=tx Then //Or copterx=tx+1 
					Gosub updateParticles
					Gosub drawcopter
				EndIf
			Next tx
			cx = cx - SW*1.5 : cy = cy - SH*1.5
		Else	
            xlimit=-cx/16-cy/8
            ylimit=cx/16-cy/8
			For tx=Max(0,xlimit) To Min(xlimit+30 ,MAP_WIDTH-1)
				For ty=Max(0,ylimit-10) To Min(ylimit+21 ,MAP_HEIGHT-1)
					burning=Min(Max(heat(tx,ty)*(burnTimes(tx,ty)>0)/100.0,0),1)
					id=	mapTiles(tx,ty)
					Gosub drawTile
				Next ty
				ttx=tx
				If Int(copterx)=tx Then //Or Int(copterx)=tx
					Gosub updateParticles
					Gosub drawcopter
				EndIf
				tx=ttx
			Next tx
			Gosub drawgui
		EndIf
        
        DrawToScreen
        If doublePx Then Gosub scalebuffer
        DrawImage gbuffer,0,0
        
        DrawScreen
    Forever
Return

updatecopter:
	tmpcopterx# = copterx
	tmpcoptery# = coptery

	sx=MouseX()/4.0
	sy=MouseY()/4.0
	Gosub inversekamera
	follow#=0.03
	copterx=copterx*(1-follow)+tx*follow
	coptery=coptery*(1-follow)+ty*follow

	copterz=40 + Sin(Timer()/10) * 6
	
    xcopterv# = copterx - tmpcopterx
    ycopterv# = coptery - tmpcoptery
    
	If MouseDown(1) Then
        For i=0 To 10
            makeparticle(PARTICLE_FOAM,copterx+1,coptery,copterz+10,xcopterv,ycopterv,-40.0,0,0,-40,0,copterz/30*550)
        Next i
	EndIf
    If MouseDown(2) And copterx>=0 And coptery>=0 And copterx<MAP_WIDTH And coptery<MAP_HEIGHT Then
        For i=0 To 10
            makeparticle(PARTICLE_FIRE,copterx+1,coptery,copterz+10,0,0,-40.0,0,0,-40,0,copterz/30*550)
        Next i
    EndIf
Return

updateParticles:
	For p.ENTITIES = Each ENTITIES
		txf# = p\tx
		tyf# = p\ty
		Gosub kamerafloat
		DrawImage pImgs(p\t, p\f), sxf, syf-p\z
		p\tx = p\tx + (p\xv + WIND_SPEED_X*0.2) * t#
		p\ty = p\ty + (p\yv + WIND_SPEED_Y*0.2) * t#
		p\z = p\z + p\zv * t#
		p\xv = p\xv + p\xa * t#
		p\yv = p\yv + p\ya * t#
		p\zv = p\zv + p\za * t#
		p\f = p\f + 3
		If p\f > pFrames Then p\f = 0
		If Timer() > p\st + p\l Then
			If  p\tx >= 0 And p\tx < MAP_WIDTH And p\ty >= 0 and p\ty < MAP_HEIGHT Then
                Select p\t
                    Case 0'PARTICLE_FIRE
                        heat(Int(p\tx),Int(p\ty)) = heat(Int(p\tx),Int(p\ty)) + 15
                    Case 2'PARTICLE_FOAM
                        heat(Int(p\tx),Int(p\ty)) = heat(Int(p\tx),Int(p\ty)) - 15
                EndSelect
			EndIf
			Delete p
		EndIf
	Next p
Return

drawgui:
	DrawToImage minimap
	'Lock(minimap)
	For x=0 To MAP_WIDTH-1 Step 2
		For y=0 To MAP_HEIGHT-1 Step 2
			id=mapTiles(x,y)
			road=(id=TILE_ROAD)*50
			PutPixel x/2,y/2, Max(Min(heat(x,y)+road,255),0) Shl 16+(1+60*(id>=TILE_TREE1 And id<=TILE_TREE3)+road) Shl 8 + Int(Min(255,-Min(Min(heat(x,y),255),0))+(id=TILE_WATER)*70)+road
			
		Next y
	Next x
	
	sx=100
	sy=75
	Gosub inversekamera
	Color 255,255,255
	PutPixel  147+tx/2,3+ty/2,255 Shl 16 + 255 Shl 8 + 255
	
	'Unlock
	DrawToImage gbuffer
	DrawImage minimap,147,3
	Dot  147+tx/2,3+ty/2
	DrawImage gui,0,0
Return



scaleBuffer:
    For sb_i=SH To 0 Step -1
        CopyBox 0, sb_i,SH*4,1,0, sb_i*4,Image(gBuffer),Image(gBuffer)
        CopyBox 0, sb_i,SH*4,1,0, sb_i*4+1,Image(gBuffer),Image(gBuffer)
		CopyBox 0, sb_i,SH*4,1,0, sb_i*4+2,Image(gBuffer),Image(gBuffer)
        CopyBox 0, sb_i,SH*4,1,0, sb_i*4+3,Image(gBuffer),Image(gBuffer)
    Next sb_i
    For sb_i=SW To 0 Step -1
        CopyBox sb_i,0,1,SW*4	,sb_i*4,0,Image(gBuffer),Image(gBuffer)
        CopyBox sb_i,0,1,SW*4	,sb_i*4+1,0,Image(gBuffer),Image(gBuffer)
        CopyBox sb_i,0,1,SW*4	,sb_i*4+2,0,Image(gBuffer),Image(gBuffer)
        CopyBox sb_i,0,1,SW*4	,sb_i*4+3,0,Image(gBuffer),Image(gBuffer)

    Next sb_i
Return
